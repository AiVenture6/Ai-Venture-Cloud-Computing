// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//Table relation
// 1. Relasi Antara User dan Rating (One to Many)
// Satu pengguna (User) bisa memberikan banyak rating (Rating)
// tetapi setiap rating hanya dimiliki oleh satu pengguna
// 2. Relasi Antara Place dan Rating (One to Many)
// Satu tempat (Place) bisa memiliki banyak rating (Rating)
// tetapi setiap rating hanya mengacu pada satu tempat.
// 3. Relasi Antara Place dan Image
// Satu tempat (Place) bisa memiliki banyak gambar (Image)
// tetapi setiap gambar hanya mengacu pada satu tempat.
// 4. Relasi Antara User, Place, dan Rating (Many to many)
// Setiap pengguna (User) bisa memberikan banyak rating (Rating) ke banyak tempat (Place).
// 5. Relasi Antara Booking dan User (Many to one)
// Satu pengguna (User) dapat memiliki banyak pemesanan (Booking)
// 6. Relasi Antara Booking dan Place (Many to one)
// Satu tempat (Place) dapat memiliki banyak pemesanan (Booking)
// 7. Relasi antara User dan Scan (one to many)
// Satu User bisa memiliki banyak Scan

model User {
  id        Int      @id @default(autoincrement()) //primary key
  email     String   @unique
  password  String
  name      String
  google_id String?
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ratingsplace       PlaceRating[] //has a relation with tb Rating
  ratingsrestaurant  RestaurantRating[] //has a relation with tb Rating
  ratinghotel        HotelRating[] //has a relation with tb Hotel
  ticketplace        PlaceTicket[] 
  bookings           Booking[] //has a relation with tb Booking
  scans              Scan[] //has a relation with tb Scan
  history            History[]
  notifications      Notification[]
  bookmarks          Bookmark[]

}

model Places {
  id          Int    @id @default(autoincrement()) //Primary key
  name        String
  description String
  category    String
  city        String
  price_range Int
  coordinate  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images   Image[] //has a relation with tb Image
  bookings Booking[] //has a relation with tb Booking
  ratings  PlaceRating[] //has a relation with tb Rating
  ticket   PlaceTicket[]
  bookmark Bookmark[]
}

model PlaceRating {
  id        Int       @id @default(autoincrement())
  user_id   Int       // foreign key ke User
  place_id  Int       // foreign key ke Places
  rating    Float
  review    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [user_id], references: [id])
  place     Places    @relation(fields: [place_id], references: [id])

  @@unique([user_id, place_id]) // Pastikan satu user hanya bisa memberikan rating pada satu Place
}

model PlaceTicket {
  id          Int       @id @default(autoincrement())
  user_id     Int       // foreign key ke User
  place_id    Int       // foreign key ke Places
  quantity    Int
  checkin     DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  user      User      @relation(fields: [user_id], references: [id])
  place     Places    @relation(fields: [place_id], references: [id])
}

model Image {
  id          Int    @id @default(autoincrement()) //Primary key
  place_id    Int //Foreign key
  image_url   String
  cluster     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  place Places @relation(fields: [place_id], references: [id]) //Define relation to tb Place
}

model Booking {
  id       Int      @id @default(autoincrement()) //Primary key
  name     String
  quantity Int
  date     DateTime
  time     DateTime
  user_id  Int //foreign key
  place_id Int //foreign key
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [user_id], references: [id]) //Define relation to tb User
  place Places @relation(fields: [place_id], references: [id]) //Define relation to tb User
}

model Scan {
  id        Int      @id @default(autoincrement()) //Primary key
  user_id   Int //foreign key
  image     String
  cluster   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id]) //Define relation to tb User
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  city        String
  description String
  price       String
  sales       String
  distance    String
  image       String
  location    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt 

  ratings     RestaurantRating[] //has a relation with tb Rating
  history     History[]
  bookmarks   Bookmark[]
}

model RestaurantRating {
  id            Int       @id @default(autoincrement())
  user_id       Int       // foreign key ke User
  restaurant_id Int       // foreign key ke Restaurant
  rating        Float
  review        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [user_id], references: [id])
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])

  @@unique([user_id, restaurant_id]) // Pastikan satu user hanya bisa memberikan rating pada satu Restaurant
}

model Hotel {
  id          Int       @id @default(autoincrement())
  name        String
  city        String
  description String
  price       String
  sales       String
  distance    String
  image       String
  location    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt 

  ratings     HotelRating[] //has a relation with tb Hotel Rating
  history     History[]
  bookmarks   Bookmark[]
}

model HotelRating {
  id            Int       @id @default(autoincrement())
  user_id       Int       // foreign key ke User
  hotel_id      Int       // foreign key ke Restaurant
  rating        Float
  review        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [user_id], references: [id])
  hotel         Hotel     @relation(fields: [hotel_id], references: [id])

  @@unique([user_id, hotel_id]) // Pastikan satu user hanya bisa memberikan rating pada satu Restaurant
}

model Notification {
  id          Int       @id @default(autoincrement())
  user_id     Int       // foreign key ke User
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}


model History {
  id            Int      @id @default(autoincrement())
  user_id       Int
  hotel_id      Int?
  restaurant_id Int?
  visited_at    DateTime @default(now())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hotel         Hotel?   @relation(fields: [hotel_id], references: [id], onDelete: SetNull)
  restaurant    Restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([hotel_id])
  @@index([restaurant_id])
}

model Bookmark {
  id            Int      @id @default(autoincrement())
  user_id       Int
  hotel_id      Int?
  place_id      Int?
  restaurant_id Int?
  created_at    DateTime @default(now())

  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hotel         Hotel?   @relation(fields: [hotel_id], references: [id], onDelete: SetNull)
  place         Places?   @relation(fields: [place_id], references: [id], onDelete: SetNull)
  restaurant    Restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([hotel_id])
  @@index([place_id])
  @@index([restaurant_id])
}
