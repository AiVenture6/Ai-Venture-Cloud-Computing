// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  google_id String?
  picture   String?
  otp        String?
  otp_expiry DateTime?
  isOtpVerified Boolean   @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ratingsplace       PlaceRating[]
  ratingsrestaurant  RestaurantRating[]
  ratinghotel        HotelRating[]
  ticketplace        PlaceTicket[] 
  scans              Scan[]
  history            History[]
  notifications      Notification[]
  bookmarks          Bookmark[]

}

model Places {
  id              Int    @id @default(autoincrement())
  name            String
  description     String  @db.Text
  category        String
  city            String
  price_range     Int
  rating_average  Float
  distance        Float
  coordinate      String
  cluster         Int
  image_url       String @db.VarChar(1000)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ratings  PlaceRating[]
  ticket   PlaceTicket[]
  bookmark Bookmark[]
  history  History[]
}

model PlaceRating {
  id        Int       @id @default(autoincrement())
  user_id   Int 
  place_id  Int
  rating    Float
  review    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [user_id], references: [id])
  place     Places    @relation(fields: [place_id], references: [id])

  @@unique([user_id, place_id]) 
}

model PlaceTicket {
  id          Int       @id @default(autoincrement())
  user_id     Int 
  place_id    Int
  quantity    Int
  checkin     DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  user      User      @relation(fields: [user_id], references: [id])
  place     Places    @relation(fields: [place_id], references: [id])
}

model Scan {
  id        Int      @id @default(autoincrement())
  user_id   Int
  image     String
  cluster   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model Restaurant {
  id              Int       @id @default(autoincrement())
  name            String
  city            String
  description     String     @db.Text
  price           String
  rating_average  Float?
  image           String     @db.VarChar(1000)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt 

  ratings     RestaurantRating[]
  history     History[]
  bookmarks   Bookmark[]
}

model RestaurantRating {
  id            Int       @id @default(autoincrement())
  user_id       Int 
  restaurant_id Int
  rating        Float
  review        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [user_id], references: [id])
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])

  @@unique([user_id, restaurant_id])
}

model Hotel {
  id              Int       @id @default(autoincrement())
  name            String
  city            String
  description     String     @db.Text
  price           String
  rating_average  Float?
  image           String     @db.VarChar(1000)
  location        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt 

  ratings     HotelRating[]
  history     History[]
  bookmarks   Bookmark[]
}

model HotelRating {
  id            Int       @id @default(autoincrement())
  user_id       Int 
  hotel_id      Int
  rating        Float
  review        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [user_id], references: [id])
  hotel         Hotel     @relation(fields: [hotel_id], references: [id])

  @@unique([user_id, hotel_id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  user_id     Int 
  title       String
  description String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}


model History {
  id            Int      @id @default(autoincrement())
  user_id       Int
  place_id      Int?
  hotel_id      Int?
  restaurant_id Int?
  visited_at    DateTime @default(now())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  place         Places?   @relation(fields: [place_id], references: [id], onDelete: SetNull)
  hotel         Hotel?   @relation(fields: [hotel_id], references: [id], onDelete: SetNull)
  restaurant    Restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([place_id])
  @@index([hotel_id])
  @@index([restaurant_id])
}

model Bookmark {
  id            Int      @id @default(autoincrement())
  user_id       Int
  hotel_id      Int?
  place_id      Int?
  restaurant_id Int?
  created_at    DateTime @default(now())

  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hotel         Hotel?   @relation(fields: [hotel_id], references: [id], onDelete: SetNull)
  place         Places?   @relation(fields: [place_id], references: [id], onDelete: SetNull)
  restaurant    Restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([hotel_id])
  @@index([place_id])
  @@index([restaurant_id])
}
